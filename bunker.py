import json
import random
import os
import sys
import shutil
import pathlib

PLAYERS_DIR = "players"
STATE_FILE = os.path.join(PLAYERS_DIR, "state.json")
DATA_FILE = "data.json"

# –¥–æ–ø–æ–º—ñ–∂–Ω—ñ
def sanitize_filename(name):
    # –ø—Ä–æ—Å—Ç–µ —Å–∞–Ω—ñ—Ç–∏–∑—É–≤–∞–Ω–Ω—è –¥–ª—è —ñ–º–µ–Ω —Ñ–∞–π–ª—ñ–≤
    return "".join(c for c in name if c.isalnum() or c in (" ", "_", "-")).rstrip()

def ensure_players_dir():
    os.makedirs(PLAYERS_DIR, exist_ok=True)

# –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è / –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
def load_data():
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_state(state):
    ensure_players_dir()
    with open(STATE_FILE, "w", encoding="utf-8") as f:
        json.dump(state, f, ensure_ascii=False, indent=2)

def load_state():
    if os.path.exists(STATE_FILE):
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return None

# –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –≥—Ä–∞–≤—Ü—ñ–≤ —Ç–∞ –±—É–Ω–∫–µ—Ä–∞
def generate_players(player_names, data, items_per_player=2):
    # backpack_pool –∫–æ–ø—ñ—è –∑ data["backpack_items"]
    backpack_pool = data["backpack"].copy()
    random.shuffle(backpack_pool)

    health_pool = data.get("health").copy()
    random.shuffle(health_pool)

    jobs_pool = data.get("jobs").copy()
    random.shuffle(jobs_pool)

    players = {}
    for name in player_names:
        name = name.strip()
        # –ø—Ä–∏–∑–Ω–∞—á–∞—î–º–æ items_per_player —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ (—è–∫—â–æ –≤–∏—Å—Ç–∞—á–∞—î)
        items = []

        if health_pool:
            health = health_pool.pop()
        else:
            health = random.choice(data.get("health"))

        if jobs_pool:
            job = jobs_pool.pop()
        else:
            job = random.choice(data.get("jobs"))

        for _ in range(items_per_player):
            if backpack_pool:
                items.append(backpack_pool.pop())
            else:
                break
        player = {
            "name": name,
            "health": health,
            "profession": job,
            "age": random.choice(data.get("ages", ["–ù–µ–≤—ñ–¥–æ–º–∏–π"])),
            "backpack": items
        }
        players[name] = player

    return players, backpack_pool, health_pool, jobs_pool

def save_player_files(players):
    ensure_players_dir()
    for player in players.values():
        fname = os.path.join(PLAYERS_DIR, f"{sanitize_filename(player['name'])}.txt")
        with open(fname, "w", encoding="utf-8") as f:
            f.write(f"–ì—Ä–∞–≤–µ—Ü—å: {player['name']}\n")
            f.write(f"–í—ñ–∫: {player['age']}\n")
            f.write(f"–ó–¥–æ—Ä–æ–≤'—è: {player['health']}\n")
            f.write(f"–ü—Ä–æ—Ñ–µ—Å—ñ—è: {player['profession']}\n")
            f.write("–†—é–∫–∑–∞–∫:\n")
            if player["backpack"]:
                for it in player["backpack"]:
                    f.write(f" - {it}\n")
            else:
                f.write(" - (–ø–æ—Ä–æ–∂–Ω—å–æ)\n")

def generate_bunker(data):
    ensure_players_dir()
    cataclysm = random.choice(data.get("cataclysms", ["–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–∞—Ç–∞–∫–ª—ñ–∑–º"]))
    description = random.choice(data.get("descriptions", ["–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"]))
    bunker_items = random.sample(data.get("bunker_items", []), min(3, len(data.get("bunker_items", []))))

    size = random.randint(50, 500)
    time = random.randint(6, 36)
    food = random.randint(3, 24)
    water = random.randint(3, 24)
    bunker_file = os.path.join(PLAYERS_DIR, "bunker.txt")

    with open(bunker_file, "w", encoding="utf-8") as f:
        f.write(f"–ö–∞—Ç–∞–∫–ª—ñ–∑–º: {cataclysm}\n")
        f.write(f"–û–ø–∏—Å –±—É–Ω–∫–µ—Ä–∞: {description}\n")
        f.write(f"–Ü–Ω–≤–µ–Ω—Ç–∞—Ä –±—É–Ω–∫–µ—Ä–∞: {', '.join(bunker_items)}\n")
        f.write(f"–†–æ–∑–º—ñ—Ä: {size} –º¬≤\n")
        f.write(f"–ß–∞—Å –ø–µ—Ä–µ–±—É–≤–∞–Ω–Ω—è: {time} –º—ñ—Å—è—Ü—ñ–≤\n")
        f.write(f"–á–∂–∞: –≤–∏—Å—Ç–∞—á–∏—Ç—å –Ω–∞ {food} –º—ñ—Å—è—Ü—ñ–≤\n")
        f.write(f"–í–æ–¥–∞: –≤–∏—Å—Ç–∞—á–∏—Ç—å –Ω–∞ {water} –º—ñ—Å—è—Ü—ñ–≤\n")

#—ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
def interactive_loop(state, data):
    print("\n–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å:\n")
    while True:
        try:
            cmd = input("> ").strip()
        except (EOFError, KeyboardInterrupt):
            print("\n–í–∏—Ö—ñ–¥...")
            save_state(state)
            break

        if not cmd:
            continue

        parts = cmd.split()
        action = parts[0].lower()

        if action in ("exit", "quit"):
            save_state(state)
            print("–ó–∞–≤–µ—Ä—à—É—é —Å–µ—Å—ñ—é...")
            break

        if action == "help":
            print("""
–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
  help                     ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –ø—ñ–¥–∫–∞–∑–∫—É
  list                     ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤ —ñ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ —É —Ä—é–∫–∑–∞–∫—É
  add <name>               ‚Äî –¥–æ–¥–∞—Ç–∏ 1 –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∞–π—Ç–µ–º —É —Ä—é–∫–∑–∞–∫ –≥—Ä–∞–≤—Ü—è (–±—Ä–∞–∫—É—î ‚Äî –º–∏—Å–ª–∏–≤—ñ—Å—Ç—å)
  addmulti <name> N       ‚Äî –¥–æ–¥–∞—Ç–∏ N –∞–π—Ç–µ–º—ñ–≤ (N —á–∏—Å–ª–æ)
  regen <name>             ‚Äî –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ä—é–∫–∑–∞–∫ –≥—Ä–∞–≤—Ü—è (–≤–∏—Ç—Ä–∞—á–∞—î –∞–π—Ç–µ–º–∏ –∑ –ø—É–ª—É)
  exit / quit              ‚Äî –∑–±–µ—Ä–µ–≥—Ç–∏ —Ç–∞ –≤–∏–π—Ç–∏
""")
            continue

        if action == "add_backpack" or action == "addmulti_backpack":
            if len(parts) < 2:
                print("–Ü–º'—è: add <name> –∞–±–æ addmulti <name> N")
                continue
            rest = cmd[len(action):].strip()

            # –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ —ñ–º–µ–Ω —É –ª–∞–ø–∫–∞—Ö
            if rest.startswith('"') or rest.startswith("'"):
                quote = rest[0]
                end_idx = rest.find(quote, 1)
                if end_idx == -1:
                    print("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —ñ–º–µ–Ω—ñ.")
                    continue
                name = rest[1:end_idx]
                after = rest[end_idx+1:].strip()
            else:
                tokens = rest.split()
                name = tokens[0]
                after = " ".join(tokens[1:]).strip()

            player = state["players"].get(name)
            if not player:
                print("–ì—Ä–∞–≤—Ü—è –∑ —Ç–∞–∫–∏–º —ñ–º–µ–Ω–µ–º –Ω–µ–º–∞—î.")
                continue

            if action == "add_backpack":
                count = 1
            else:
                try:
                    count = int(after.split()[0])
                except Exception:
                    print("–í–∫–∞–∂–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è addmulti: addmulti <name> N")
                    continue

            added = []
            for _ in range(count):
                if not state["backpack_pool"]:
                    print("–ü—É–ª –≤–∏—á–µ—Ä–ø–∞–Ω–æ ‚Äî –Ω–µ–º–∞—î –±—ñ–ª—å—à–µ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –¥–ª—è –≤–∏–¥–∞—á—ñ.")
                    break
                item = state["backpack_pool"].pop()
                player["backpack"].append(item)
                added.append(item)

            if added:
                if action == "add_backpack":
                    filename = f"{sanitize_filename(name)}_–ü—Ä–µ–¥–º–µ—Ç.txt"
                else:
                    filename = f"{sanitize_filename(name)}_{len(added)}_–ü—Ä–µ–¥–º–µ—Ç—ñ–≤.txt"

                item_path = os.path.join(PLAYERS_DIR, filename)
                with open(item_path, "w", encoding="utf-8") as item_file:
                    item_file.write(f"–ì—Ä–∞–≤–µ—Ü—å: {name}\n")
                    item_file.write("–û—Ç—Ä–∏–º–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–∏:\n")
                    for it in added:
                        item_file.write(f" - {it}\n")

                print(f"–°—Ç–≤–æ—Ä–µ–Ω–æ —Ñ–∞–π–ª: {filename}")
                save_state(state)
            continue

        if action == "regen":
            if len(parts) < 2:
                print("–í–∫–∞–∂–∏ —ñ–º'—è: regen <name>")
                continue
            name = cmd[len("regen "):].strip()
            player = state["players"].get(name)
            if not player:
                print("–ì—Ä–∞–≤—Ü—è –∑ —Ç–∞–∫–∏–º —ñ–º–µ–Ω–µ–º –Ω–µ–º–∞—î.")
                continue

            player["backpack"] = []
            items_per_player = 2  # üîπ —Ñ—ñ–∫—Å—É—î–º–æ 2 –ø—Ä–µ–¥–º–µ—Ç–∏
            added = []
            for _ in range(items_per_player):
                if not state["backpack_pool"]:
                    break
                item = state["backpack_pool"].pop()
                player["backpack"].append(item)
                added.append(item)

            # —Å—Ç–≤–æ—Ä—é—î–º–æ –æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
            regen_filename = f"{sanitize_filename(name)}_backpack_regen.txt"
            regen_path = os.path.join(PLAYERS_DIR, regen_filename)
            with open(regen_path, "w", encoding="utf-8") as f:
                f.write(f"–ì—Ä–∞–≤–µ—Ü—å: {name}\n")
                f.write("–ù–æ–≤–∏–π —Ä—é–∫–∑–∞–∫:\n")
                if added:
                    for it in added:
                        f.write(f" - {it}\n")
                else:
                    f.write(" - (–ø–æ—Ä–æ–∂–Ω—å–æ)\n")

            save_state(state)
            print(f"–†—é–∫–∑–∞–∫ {name} –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π, —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ñ–∞–π–ª {regen_filename}")
            continue

        # if action == "list":
        #     for name, p in state["players"].items():
        #         print(f"- {name}: {len(p.get('backpack', []))} –ø—Ä–µ–¥–º–µ—Ç—ñ–≤")
        #     continue

        # if action == "show":
        #     if len(parts) < 2:
        #         print("–í–∫–∞–∂–∏ —ñ–º'—è: show <name>")
        #         continue
        #     name = cmd[len("show "):].strip()
        #     player = state["players"].get(name)
        #     if not player:
        #         print("–ì—Ä–∞–≤–µ—Ü—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
        #     else:
        #         print(f"–ì—Ä–∞–≤–µ—Ü—å: {name}")
        #         print("–†—é–∫–∑–∞–∫:")
        #         if player["backpack"]:
        #             for it in player["backpack"]:
        #                 print(" -", it)
        #         else:
        #             print(" - (–ø–æ—Ä–æ–∂–Ω—å–æ)")
        #     continue

        # if action == "backpack_pool":
        #     print(f"–£ –ø—É–ª—ñ –∑–∞–ª–∏—à–∏–ª–æ—Å—å {len(state['backpack_pool'])} –ø—Ä–µ–¥–º–µ—Ç—ñ–≤.")
        #     continue

        # if action == "save":
        #     save_state(state)
        #     print("Saved.")
        #     continue

        print("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏ 'help' –¥–ª—è –ø—ñ–¥–∫–∞–∑–∫–∏.")
    # –∫—ñ–Ω–µ—Ü—å loop

# ---- —Å—Ç–∞—Ä—Ç–æ–≤–∞ –ª–æ–≥—ñ–∫–∞ ----
def main():
    if not os.path.exists(DATA_FILE):
        print(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ {DATA_FILE}. –°—Ç–≤–æ—Ä–∏ —Ñ–∞–π–ª –∑ –¥–∞–Ω–∏–º–∏ (backpack_items —Ç–æ—â–æ).")
        sys.exit(1)

    data = load_data()

    # —è–∫—â–æ —î –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π state ‚Äî –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏
    state = load_state()
    if state:
        print("–ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω –≥—Ä–∏.")
        answer = input("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω? (Y/n) > ").strip().lower()
        if answer in ("", "y", "yes"):
            print("–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Å—Ç–∞–Ω...")
            interactive_loop(state, data)
            return

    # —ñ–Ω–∞–∫—à–µ ‚Äî –Ω–æ–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è
    print("–ù–æ–≤–∞ —Å–µ—Å—ñ—è. –í–≤–µ–¥—ñ—Ç—å —ñ–º–µ–Ω–∞ –≥—Ä–∞–≤—Ü—ñ–≤ —á–µ—Ä–µ–∑ –∫–æ–º—É")
    names_input = input("> ")
    player_names = [name.strip() for name in names_input.split(",") if name.strip()]

    items_per_player = 2
    # –º–æ–∂–Ω–∞ –¥–∞—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–≤–µ—Å—Ç–∏ —ñ–Ω—à—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å, –∞–ª–µ –ø–æ–∫–∏ default
    players, backpack_pool, health_pool, jobs_pool = generate_players(player_names, data, items_per_player=items_per_player)

    # –∑–∞–ø–∏—Å—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ —Ñ–∞–π–ª–∏
    save_player_files(players)
    generate_bunker(data)

    # state –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞ –¥–∏—Å–∫
    state = {
        "players": players,   # dict name -> player
        "backpack_pool": backpack_pool,         # list –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞–π—Ç–µ–º—ñ–≤ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ pop() –∑ –∫—ñ–Ω—Ü—è)
        "health_pool": health_pool,
        "jobs_pool": jobs_pool,
        "items_per_player": items_per_player
    }
    save_state(state)
    print("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    interactive_loop(state, data)

if __name__ == "__main__":
    main()
